package com.suitcase.users;

/**
 * https://spring.io/guides/gs/accessing-data-mysql/
 */

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataIntegrityViolationException;
import org.springframework.web.bind.annotation.*;

import java.util.ArrayList;
import java.util.List;

@RestController    // This means that this class is a Controller
@RequestMapping("/users") // This means URL's start with /com.suitcase.users (after Application path)
public class UserController {

    private static final Logger logger = LoggerFactory.getLogger(UserController.class);

    @Autowired // This means to get the bean called userRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private UserRepository userRepository;

    @GetMapping("/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String username
            , @RequestParam String email) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        User n = new User();
        n.setUsername(username);
        n.setEmail(email);
        try {
            userRepository.save(n);
            logger.info("Saved user {}", username);
            return "Saved";
        } catch (DataIntegrityViolationException ex) {
            logger.error(ex.getMessage());
            return "User already exists";
        } catch (Exception ex) {
            logger.error(ex.getMessage());
            return "Error: " + ex.getMessage();
        }
    }

    @GetMapping("/all")
    public @ResponseBody List<User> getAllUsers() {
        // This returns a JSON or XML with the com.suitcase.users
        List<User> all = new ArrayList<>();
        userRepository.findAll().forEach(all::add);
        logger.info("Get all com.suitcase.users");
        return all;
    }
}